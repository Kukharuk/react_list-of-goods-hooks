{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortField","goodsFromServer","App","useState","without","sortField","setSortField","isReversed","setIsReversed","sortedGoods","goods","isReverse","prepearedGoods","sort","curent","next","byLength","length","byAlphabet","localeCompare","reverse","sortBy","className","type","cn","onClick","prev","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAsBKA,E,0EAjBQC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAOGD,K,WAAAA,E,wBAAAA,E,iCAAAA,M,KA6BE,IAAME,EAAM,WACjB,MAAkCC,mBAASH,EAAUI,SAArD,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAoCH,oBAAS,GAA7C,mBAAOI,EAAP,KAAmBC,EAAnB,KACMC,EA1BR,SAAgBC,EAAgBL,EAAsBM,GACpD,IAAMC,EAAc,YAAOF,GAmB3B,OAjBIL,GACFO,EAAeC,MAAK,SAACC,EAAQC,GAC3B,OAAQV,GACN,KAAKL,EAAUgB,SACb,OAAOF,EAAOG,OAASF,EAAKE,OAC9B,KAAKjB,EAAUkB,WACb,OAAOJ,EAAOK,cAAcJ,GAC9B,QACE,OAAO,MAKXJ,GACFC,EAAeQ,UAGVR,EAMaS,CAAOpB,EAAiBI,EAAWE,GAWvD,OACE,sBAAKe,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAWE,IACT,SAAU,UAAW,CAAE,WApDb,uBAoDyBnB,IAErCoB,QAAS,kBAAMnB,EAAaN,EAAUkB,aALxC,iCAUA,wBACEK,KAAK,SACLD,UAAWE,IACT,SACA,aACA,CAAE,WAjES,iBAiEGnB,IAEhBoB,QAAS,kBAAMnB,EAAaN,EAAUgB,WAPxC,4BAYA,wBACEO,KAAK,SACLD,UAAWE,IACT,SAAU,aAAc,CAAE,YAAajB,IAEzCkB,QAvCmB,WACzBjB,GAAc,SAAAkB,GAAI,OAAKA,MAiCnB,sBASErB,GAAaE,IACb,wBACEgB,KAAK,SACLD,UAAU,4BACVG,QA3CI,WACZnB,EAAaN,EAAUI,SACvBI,GAAc,IAsCR,sBASJ,6BACGC,EAAYkB,KAAI,SAAAC,GAAI,OACnB,oBACE,UAAQ,OADV,SAIGA,GAFIA,YC9GjBC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.d9abdbb6.chunk.js","sourcesContent":["import 'bulma/css/bulma.css';\nimport './App.scss';\nimport cn from 'classnames';\nimport { useState } from 'react';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nconst SORT_BY_LENGTH = 'sortByLength';\nconst SORT_ALPHABET = 'SortAlphabetically';\n\n// type SortField = 'sortByLength' | 'SortAlphabetically' | '';\nenum SortField {\n  without = '',\n  byLength = 'sortByLength',\n  byAlphabet = 'SortAlphabetically',\n}\n\nfunction sortBy(goods:string[], sortField: SortField, isReverse:boolean) {\n  const prepearedGoods = [...goods];\n\n  if (sortField) {\n    prepearedGoods.sort((curent, next) => {\n      switch (sortField) {\n        case SortField.byLength:\n          return curent.length - next.length;\n        case SortField.byAlphabet:\n          return curent.localeCompare(next);\n        default:\n          return 0;\n      }\n    });\n  }\n\n  if (isReverse) {\n    prepearedGoods.reverse();\n  }\n\n  return prepearedGoods;\n}\n\nexport const App = () => {\n  const [sortField, setSortField] = useState(SortField.without);\n  const [isReversed, setIsReversed] = useState(false);\n  const sortedGoods = sortBy(goodsFromServer, sortField, isReversed);\n\n  const handleReverseClick = () => {\n    setIsReversed(prev => !prev);\n  };\n\n  const reset = () => {\n    setSortField(SortField.without);\n    setIsReversed(false);\n  };\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={cn(\n            'button', 'is-info', { 'is-light': sortField !== SORT_ALPHABET },\n          )}\n          onClick={() => setSortField(SortField.byAlphabet)}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={cn(\n            'button',\n            'is-success',\n            { 'is-light': sortField !== SORT_BY_LENGTH },\n          )}\n          onClick={() => setSortField(SortField.byLength)}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={cn(\n            'button', 'is-warning', { 'is-light': !isReversed },\n          )}\n          onClick={handleReverseClick}\n        >\n          Reverse\n        </button>\n        {(sortField || isReversed) && (\n          <button\n            type=\"button\"\n            className=\"button is-danger is-light\"\n            onClick={reset}\n          >\n            Reset\n          </button>\n        )}\n      </div>\n      <ul>\n        {sortedGoods.map(good => (\n          <li\n            data-cy=\"Good\"\n            key={good}\n          >\n            {good}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}